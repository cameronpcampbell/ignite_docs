{"/components/accordion":{"title":"Accordion","data":{"":"Sections of information that are expandable and collapsable.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the accordion. (Defaults to UDim.new(1, 0)).\tSections\t{{ Title: string, Content: string }}\tThe sections for the accordion.\tExpandedSection\tFusion.UsedAs<number?>?\tThe index of the section in the Sections array to be expanded. (Set to nil to have no section expanded).","example#Example":"Scope:Accordion {\n  Width = UDim.new(1, 0),\n  Sections = {\n    { Title = \"Section One\", Content = \"I am Section One! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor. incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis.\" },\n    { Title = \"Section Two\", Content = \"I am Section Two! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor. incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis.\" },\n    { Title = \"Section Three\", Content = \"I am Section Three! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor. incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis.\" }\n  },\n  ExpandedSection = 2\n}"}},"/components/button":{"title":"Button","data":{"":"A button that can be interacted with.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim\t\"Auto\">?\tThe width of the button. (Defaults to UDim.new(1, 0)).\tContent\tFusion.UsedAs<{ string } | string>?\tThe content of the button - use a asset id (rbxassetid://...) for an icon. (Defaults to Button).\tVariant\t(\"Primary\" | \"Secondary\" | \"Destructive\")?\tThe button variant (Defaults to Primary).","example#Example":"Scope:Button {\n  Width = UDim.new(1, 0),\n  Content = { \"rbxassetid://105356698746495\", \"Click Me!\" },\n  Variant = \"Primary\" :: \"Primary\"\n}"}},"/components/background":{"title":"Background","data":{"":"A frame that matches the current theme's Background/Primary color. See more about themes here.","example#Example":"Scope:Background {\n  Size = UDim.fromScale(1, 1)\n}"}},"/components/codeLabel":{"title":"Code Label","data":{"":"A component that displays code.","properties#Properties":"Name\tType\tDescription\tText\tFusion.UsedAs<string?>\tThe text content of the component.\tTextSize\tFusion.UsedAs?\tThe size of the text.\tFocus\tFusion.UsedAs<\"Title\" | \"Body\">?\tThe focus mode of the text label. (affects the text color).\tWeight\tFusion.UsedAs<Enum.FontWeight>?\tThe font weight of the text label.\tStyle\tFusion.UsedAs<Enum.FontStyle>?\tThe font style of the text label.\tFontId\tFusion.UsedAs<number>?\tThe font Id of the text label (Defaults to the Builder Sans font Id).","example#Example":"Scope:CodeLabel {\n  Text = \"local function()\\n    return print(\\\"Hello World! 👋\\\")\\nend\"\n}"}},"/components/container":{"title":"Container","data":{"":"A super customisable container that can have a header, and can be expanded and collapsed. (Height is automatically determined).","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs?\tThe width of the container. (Defaults to UDim.new(1, 0)).\tHeader\tHeaderProps\tThe properties for the container's header (omit if you do not want one).","header-properties-headerprops#Header Properties (HeaderProps)":"Name\tType\tDescription\tText\tFusion.UsedAs<string>\tThe Text (title) for the header.\tIsExpanded\tFusion.UsedAs<boolean>?\tIf the container should be expanded.\tContent\tFusion.UsedAs<Fusion.Child>?\tThe header content (aligned to the right).\tDisabled\tFusion.UsedAs<boolean>?\tIf the header is to be disabled. Designed for toggling the header via a state object.","example#Example":"Scope:Container {\n  Header = { Text = \"My Awesome Container 🚀\" },\n  [Children] = {\n    Scope:TextLabel {\n      Text = \"Content Goes Here :)!\\nContent Goes Here :)!\\nContent Goes Here :)!\",\n      LineHeight = 1.4,\n    },\n    \n    Scope:PaddingLarge()\n  }\n}"}},"/components/embeddedContainer":{"title":"Embedded Container","data":{"":"A container component designed to be embedded in your content.","properties#Properties":"Name\tType\tDescription\tStrokeBottom\tFusion.UsedAs<boolean>?\tif the container should have a stroke on the bottom.\tStrokeTop\tFusion.UsedAs<boolean>?\tif the container should have a stroke on the top.\tStrokeLeft\tFusion.UsedAs<boolean>?\tif the container should have a stroke on the left.\tStrokeRight\tFusion.UsedAs<boolean>?\tif the container should have a stroke on the right.\tChildrenZIndex\tFusion.UsedAs<number>?\tThe ZIndex of the container's children wrapper.","example#Example":"Scope:EmbeddedContainer {\n  Size = UDim2.new(1, 0),\n  AutomaticSize = Enum.AutomaticSize.Y,\n  StrokeBottom = true,\n  \n  [Children] = {\n    Scope:Button {\n      Width = UDim.new(1, 0),\n      Content = \"Export\",\n    },\n    Scope:Button {\n      Width = UDim.new(1, 0),\n      Content = \"Import\",\n      Variant = \"Secondary\" :: \"Secondary\"\n    },\n    Scope:New \"UIListLayout\" {\n      FillDirection = Enum.FillDirection.Horizontal,\n      HorizontalFlex = Enum.UIFlexAlignment.Fill,\n      Padding = UDim.new(0, 8)\n    },\n    Scope:New \"UIPadding\" {\n      PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8),\n      PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8),\n    }\n  }\n}"}},"/components/checkbox":{"title":"Checkbox","data":{"":"A checkbox that can be one of three states (enabled, disabled and nil).","properties#Properties":"Name\tType\tDescription\tEnabled\tFusion.UsedAs<boolean?>?\tThe state of the checkbox.","example#Example":"Scope:Checkbox {\n  Enabled = true\n}"}},"/components/imageBackground":{"title":"Image Background","data":{"":"A background with an image.","properties#Properties":"Name\tType\tDescription\tImageSource\tstring | EditableImage\tThe source of the image.\tImageSourceSize\tFusion.UsedAs<Vector3>\tThe size of the image source. Uses Vector3 for performance reasons - only the X and Z components are used.","example#Example":"Scope:ImageBackground {\n  Size = UDim2.new(1,0, 0,256),\n  ImageSource = \"rbxassetid://89904945503839\",\n  ImageSourceSize = Vector3.new(256, 0, 256)\n}"}},"/components/map":{"title":"Map","data":{"":"A container with key-value pairs.","properties#Properties":"Name\tType\tDescription\tHeader\tHeaderProps\tThe optiional header for the map.\tSections\t{{ Key: string, Value: string | MapValueProps }}\tThe key-value pairs for the map.\t@OnItemUpdate\t(itemName: string, itemIdx: number, newValue: unknown, oldValue: unknown) -> ()\tA function that runs when one of the key-value pairs is updated.","header-properties-headerprops#Header Properties (HeaderProps)":"Name\tType\tDescription\tText\tFusion.UsedAs<string>\tThe Text (title) for the header.\tIsExpanded\tFusion.UsedAs<boolean>?\tIf the container should be expanded.\tContent\tFusion.UsedAs<Fusion.Child>?\tThe header content (aligned to the right).\tDisabled\tFusion.UsedAs<boolean>?\tIf the header is to be disabled. Designed for toggling the header via a state object.","map-value-properties-mapvalueprops#Map Value Properties (MapValueProps)":"Name\tType\tDescription\tText\tFusion.UsedAs<string>?\tThe text for the value.\tPlaceholder\tFusion.UsedAs<string>?\tThe optional placeholder text for the value.\tValidation\tstring | ValidationProps | nil\tThe optional validation for the value.","validation-properties-validationprops#Validation Properties (ValidationProps)":"Name\tType\tDescription\tPattern\tFusion.UsedAs<string>\tThe string pattern that the text input's data must conform to.\tMode\tFusion.UsedAs<\"Restrict\" | \"ErrorVisual\" | nil>\tRestrict prevents data that does not match the pattern from being inside of the text input whilst ErrorVisual shows a red outline around the text input when its data does not conform to the pattern.","example#Example":"Scope:Map {\n  Header = { Text = \"Parameters\" },\n  Sections = {\n    { Key = \"Scale\", Value = { Text = \"0\", Validation = \"%d+\" } },\n    { Key = \"Name\", Value = \"CoolName\" } :: any,\n    { Key = \"Type\", Value = \"MyType\" } :: any,\n  }\n}"}},"/components/navigation":{"title":"Navigation","data":{"":"A component with sections that can be hovered and selected.","properties#Properties":"Name\tType\tDescription\tSections\t{ string | Fusion.Child }\tThe sections for the navigation component.\tActiveSection\tFusion.UsedAs<number>?\tThe index of the section in the Sections array to be active. (Set to nil to have no section active).\tDefaultActiveSection\tFusion.UsedAs<number?>?\tIf no section is active then this section will automatically become active.\tFillDirection\tFusion.UsedAs<Enum.FillDirection>?\tThe fill direction for the navigation (Defaults to Enum.FillDirection.Horizontal).","example#Example":"Scope:Navigation {\n  Sections = { \"Hello World\", \"Baz\", \"Foo Bar\" },\n  DefaultActiveSection = 2,\n  ActiveSection = 3\n}"}},"/components/scrollable":{"title":"Scrollable","data":{"":"An element with scrollable content. (only the Y axis is supported currently - X axis coming soon 👀).","properties#Properties":"Name\tType\tDescription\tCanvasPositionY\tFusion.UsedAs<number>?\tThe y position of the scroll bar.","example#Example":"Scope:Scrollable {\n  Size = UDim2.new(1,0, 0,150),\n  CanvasSize = UDim2.fromOffset(0, 500),\n  [Children] = Scope:TextLabel {\n    Text = \"Scrollable Content Goes Here :)!\\nScrollable Content Goes Here :)!\\nScrollable Content Goes Here :)!\",\n    LineHeight = 1.4,\n  },\n}"}},"/components/progress":{"title":"Progress","data":{"":"A highly customisable progress bar with optional sections.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the progress bar. (Defaults to UDim.new(1, 0)).\tProgressPercent\tFusion.UsedAs<number>?\tThe amount of progress that has been made (number between 0 and 1). (Defaults to 1).\tSections\tFusion.UsedAs<number? | { string }?>?\tOptional sections for the progress bar. Use an array of strings if the sections have titles, otherwise use an integer.","example#Example":"Scope:Progress {\n  Width = UDim.new(1, 0),\n  ProgressPercent = .65,\n  Sections = { \"⌛ Step One: Loading\", \"🛡️ Step Two: Verifying\", \"💾 Step 3: Applying\" }\n}"}},"/components/slider":{"title":"Slider","data":{"":"Allows the user to select a value (from 0 to 1).","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the slider. (Defaults to UDim.new(1, 0)).\tProgressPercent\tFusion.UsedAs<number>?\tThe progress (value between 0 and 1) of the slider. (Defaults to 0).\tStepSize\tFusion.UsedAs<number>?\tThe amount that is incremented when the user is dragging the slider. (Defaults to 1).","example#Example":"Scope:Slider {\n  Width = UDim.new(1, 0),\n  ProgressPercent = .75\n}"}},"/components/switch":{"title":"Switch","data":{"":"A switch component.","properties#Properties":"Name\tType\tDescription\tSize\tFusion.UsedAs<\"Small\" | \"Large\">?\tThe size mode for the switch. (Defaults to \"Large\").\tEnabled\tFusion.UsedAs<boolean>?\tIf the switch is to be enabled. (Defaults to true).","example#Example":"Scope:Switch {\n  Size = \"Large\" :: \"Large\",\n  Enabled = true\n}"}},"/components/tabs":{"title":"Tabs","data":{"":"Allows easy switching between different views.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the accordion. (Defaults to UDim.new(1, 0)).\tActiveSection\tFusion.UsedAs<number>?\tThe index of the section in the Sections array to be active. (Defaults to DefaultActiveSection).\tDefaultActiveSection\tFusion.UsedAs<number?>?\tIf no section is active then this section will automatically become active.\tSectionSizing\tFusion.UsedAs<\"Fit\" | \"Fill\">?\tThe sizing mode for the tabs.\tRightContent\tFusion.Child?\tOptional content to display to the right of the component.","example#Example":"Scope:Tabs {\n  Width = UDim.new(1, 0),\n  Sections = {\n    { Text = \"Cool Tab\" },\n    { Text = \"Awesome Tab\" },\n    { Text = \"Epic Tab\" }\n  }\n}"}},"/components/textInput":{"title":"Text Input","data":{"":"An input for entering text.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the text input. (Defaults to UDim.new(1, 0)).\tPlaceholder\tFusion.UsedAs<string?>\tThe placeholder for the text input.\tValue\tFusion.UsedAs<string?>\tThe value of the text input.\tVariant\tFusion.UsedAs<\"Primary\" | \"Secondary\" | nil>?\tThe variant for the text input. (Defaults to \"Primary\").\tKeybind\tFusion.UsedAs<{ Enum.KeyCode }>?\tSpecifies a keybind that can be used to focus the text input.\tValidation\tValidationProps | string | nil\tSpecifies a pattern that the text input's data must conform to.","validation-properties-validationprops#Validation Properties (ValidationProps)":"Name\tType\tDescription\tPattern\tFusion.UsedAs<string>\tThe string pattern that the text input's data must conform to.\tMode\tFusion.UsedAs<\"Restrict\" | \"ErrorVisual\" | nil>\tRestrict prevents data that does not match the pattern from being inside of the text input whilst ErrorVisual shows a red outline around the text input when its data does not conform to the pattern.","example#Example":"Scope:TextInput {\n  Value = \"7205\",\n  Keybind = { Enum.KeyCode.LeftControl, Enum.KeyCode.K },\n  Validation = { Pattern = \"%d+\", Mode = \"Restrict\" :: \"Restrict\" },\n}"}},"/components/textLabel":{"title":"Text Label","data":{"":"A component that displays text.","properties#Properties":"Name\tType\tDescription\tText\tFusion.UsedAs<string?>\tThe text content of the component.\tTextSize\tFusion.UsedAs?\tThe size of the text.\tFocus\tFusion.UsedAs<\"Title\" | \"Body\">?\tThe focus mode of the text label. (Effects the text color). (Defaults to \"Title\").\tWeight\tFusion.UsedAs<Enum.FontWeight>?\tThe font weight of the text label. (Defaults)\tStyle\tFusion.UsedAs<Enum.FontStyle>?\tThe font style of the text label.\tFontId\tFusion.UsedAs<number>?\tThe font Id of the text label (Defaults to the Builder Sans font Id).","example#Example":"Scope:TextLabel {\n  Text = \"Hello World! 👋\"\n}"}},"/components/widget":{"title":"Widget","data":{"":"A plugin widget with a Background component.","properties#Properties":"Name\tType\tDescription\tId\tstring\tThe Identifier of the widget.\tTitle\t(string | Fusion.Value<string>\tFusion.Computed<string>)?\tThe title of the widget.\tInitDockState\tEnum.InitialDockState?\tThe initial dock state for the widget.\tInitEnabled\tboolean?\tThe enabled state of the Widget if it does not have a saved state from a previous session.\tOverrideEnabledRestore\tboolean?\tIf true, will override any saved enabled state with the InitEnabled value.\tFloatXSize\tnumber?\tThe initial pixel width of the PluginGui when floating.\tFloatYSize\tnumber?\tThe initial pixel height of the PluginGui when floating.\tMinWidth\tnumber?\tThe minimum pixel width of the PluginGui. (Defaults to FloatXSize).\tMinHeight\tnumber?\tThe minimum pixel height of the PluginGui. (Defaults to FloatYSize).\tDebugMode\tboolean?\tIf true then an unhydrated copy of the widgets children is parented to StarterGui.","example#Example":"Scope:Widget {\n  Id = \"IgnitePlugin \",\n  Title = \"Ignite Plugin\",\n  InitDockState = Enum.InitialDockState.Float,\n  FloatXSize = 300, FloatYSize = 150,\n}"}},"/":{"title":"About Ignite","data":{"":"Ignite is a UI library for developing Roblox plugins. It includes 10+ goregeous high-dpi compatible components.","getting-started#Getting Started":"Install Ignite via Wally or via github releases.\nignite = \"cameronpcampbell/ignite@1.2.0\"\nSetup your default.project.json (if using rojo).\n{\n  \"name\": \"my_ignite_plugin\",\n  \"tree\": {\n    \"$className\": \"DataModel\",\n    \"ServerStorage\": {\n      \"Plugin\": {\n        \"$path\": \"src\", // replace with the path to your plugin's source.\n        \"Packages\": { \"$path\": \"Packages\" }\n      }\n    }\n  }\n}\nSetup the root script of your plugin.\n--!strict\n--> Modules -------------------------------------------------------------------------------------------\nlocal Packages = -- Path to Packages.\nlocal Fusion = require(Packages.Fusion)\nlocal Ignite = require(Packages.Ignite)\n-------------------------------------------------------------------------------------------------------\n--> Variables -----------------------------------------------------------------------------------------\nlocal Scope = Fusion.scoped(Fusion, Ignite)\n-------------------------------------------------------------------------------------------------------\nExample Ignite project.\n--!strict\n--> Modules -------------------------------------------------------------------------------------------\nlocal Packages = script.Parent.Packages\nlocal Fusion = require(Packages.Fusion)\nlocal Ignite = require(Packages.Ignite)\n-------------------------------------------------------------------------------------------------------\n--> Variables -----------------------------------------------------------------------------------------\nlocal Scope = Fusion.scoped(Fusion, Ignite)\nlocal Children, OnEvent, peek = Fusion.Children, Fusion.OnEvent, Fusion.peek\n-------------------------------------------------------------------------------------------------------\nlocal CounterState = Scope:Value(0)\nlocal ComputeLabelText = Scope:Computed(function(use) return `Counter is: {use(CounterState)}` end)\nScope:Widget {\n  Id = \"IgnitePlugin\",\n  Title = \"My First Ignite Plugin 🚀\",\n  InitDockState = Enum.InitialDockState.Left,\n  FloatXSize = 300, FloatYSize = 800,\n  [Children] = {\n    Scope:TextLabel {\n      Text = ComputeLabelText,\n      LayoutOrder = 0\n    },\n    Scope:Button {\n      Content = \"Increment Counter!\",\n      LayoutOrder = 1,\n      [OnEvent \"MouseButton1Click\"] = function()\n        CounterState:set(peek(CounterState) + 1)\n      end\n    },\n    Scope:New \"UIListLayout\" {\n      SortOrder = Enum.SortOrder.LayoutOrder,\n      Padding = UDim.new(0, 8)\n    },\n    Scope:New \"UIPadding\" {\n      PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8),\n      PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8)\n    }\n  }\n}"}},"/utilities/theme":{"title":"Theme","data":{"":"Utilities for changing the theme and getting items from the current theme.","settheme#:SetTheme":"","arguements#Arguements":"Name\tType\tDescription\tscope\tFusion.Scope\tThe scope to set the theme for.\ttheme\tThemeConfig | DefaultTheme\tThe new theme for the scope.\t\ntype ThemeConfig = {\n  Background: {\n    Primary: Color3,\n    Secondary: Color3,\n    Tertiary: Color3,\n    Stroke: Color3\n  },\n  Text: {\n    Title: Color3,\n    Body: Color3\n  },\n  Accent: {\n    Primary: Color3,\n    Secondary: Color3,\n    Destructive: Color3\n  }\n}\ntype DefaultTheme = \"Dark\"","getthemeitem#:GetThemeItem":"Name\tType\tDescription\tscope\tFusion.Scope\tThe scope to get the theme item for.\titem\tFusion.UsedAs<ThemeItem>\tThe theme item to get.\tmutator\tFusion.UsedAs<Types.MutatorPreset | (self: Color3) -> Color3 | nil>?\tThe mutator to apply to this instance of the theme item. Choose from a preset or make your own.\ttwInfo\tFusion.UsedAs<TweenInfo?>? | false\tThe tween info to apply to item. Defaults to TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out).\t\ntype ThemeItem = \"Background/Primary\" | \"Background/Secondary\" | \"Background/Tertiary\" | \"Background/Stroke\" | \"Text/Title\" | \"Text/Body\" | \"Accent/Primary\" | \"Accent/Secondary\" | \"Accent/Destructive\"\ntype MutatorPreset = \"Default\" | \"Hover\" | \"Focus\" | \"Highlight\""}}}